name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - main

jobs:
  build-image:
    name: Build Image
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.extract.outputs.version }}
      artifactId: ${{ steps.extract.outputs.artifactId }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Extract artifactId and version from pom.xml
        id: extract
        run: |
          ARTIFACT_ID=$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "artifactId=$ARTIFACT_ID" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image with Spring Boot Buildpacks
        run: ./mvnw spring-boot:build-image

      - name: Save Docker image as artifact
        run: |
          docker save -o ${{ steps.extract.outputs.artifactId }}.tar \
            ${{ steps.extract.outputs.artifactId }}:${{ steps.extract.outputs.version }}

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.extract.outputs.artifactId }}-image
          path: ${{ steps.extract.outputs.artifactId }}.tar

  push-to-ecr:
    name: Push to ECR
    runs-on: ubuntu-latest
    needs: build-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-image.outputs.artifactId }}-image
          path: .

      - name: Load Docker image
        run: docker load -i ${{ needs.build-image.outputs.artifactId }}.tar

      - name: Log in to Amazon ECR
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URL }}

      - name: Tag Docker image for ECR
        run: |
          docker tag ${{ needs.build-image.outputs.artifactId }}:${{ needs.build-image.outputs.version }} \
            ${{ secrets.ECR_REPOSITORY_URL }}:${{ needs.build-image.outputs.version }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URL }}:${{ needs.build-image.outputs.version }}

      - name: Docker Cleanup
        run: docker system prune -af
